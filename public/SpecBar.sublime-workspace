{
	"auto_complete":
	{
		"selected_items":
		[
		]
	},
	"buffers":
	[
		{
			"file": "/Users/Sam/SpecBar/server.js",
			"settings":
			{
				"buffer_size": 13591,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					266,
					1,
					"left_delete",
					null,
					"AQAAABgHAAAAAAAAGAcAAAAAAAABAAAACg",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAGQcAAAAAAAAZBwAAAAAAAAAAAAAAAAAA"
				],
				[
					267,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABgHAAAAAAAAGQcAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAGAcAAAAAAAAYBwAAAAAAAAAAAAAAAPC/"
				],
				[
					268,
					1,
					"left_delete",
					null,
					"AQAAABgHAAAAAAAAGAcAAAAAAAABAAAAIA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAGQcAAAAAAAAZBwAAAAAAAAAAAAAAAPC/"
				],
				[
					269,
					1,
					"insert",
					{
						"characters": "\n-"
					},
					"AwAAABgHAAAAAAAAGQcAAAAAAAAAAAAAGQcAAAAAAAAhBwAAAAAAAAAAAAAhBwAAAAAAACIHAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAGAcAAAAAAAAYBwAAAAAAAAAAAAAAAPC/"
				],
				[
					270,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAACIHAAAAAAAAIwcAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAIgcAAAAAAAAiBwAAAAAAAAAAAAAAAPC/"
				],
				[
					273,
					1,
					"left_delete",
					null,
					"AQAAAFcHAAAAAAAAVwcAAAAAAAABAAAACg",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAWAcAAAAAAABYBwAAAAAAAAAAAAAAAAAA"
				],
				[
					274,
					1,
					"insert",
					{
						"characters": "\n-"
					},
					"AwAAAFcHAAAAAAAAWAcAAAAAAAAAAAAAWAcAAAAAAABgBwAAAAAAAAAAAABgBwAAAAAAAGEHAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAVwcAAAAAAABXBwAAAAAAAAAAAAAAAPC/"
				],
				[
					275,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGEHAAAAAAAAYgcAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAYQcAAAAAAABhBwAAAAAAAAAAAAAAAPC/"
				],
				[
					278,
					1,
					"left_delete",
					null,
					"AQAAAJEHAAAAAAAAkQcAAAAAAAABAAAACg",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAkgcAAAAAAACSBwAAAAAAAAAAAAAAAAAA"
				],
				[
					279,
					1,
					"insert",
					{
						"characters": "\n-"
					},
					"AwAAAJEHAAAAAAAAkgcAAAAAAAAAAAAAkgcAAAAAAACaBwAAAAAAAAAAAACaBwAAAAAAAJsHAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAkQcAAAAAAACRBwAAAAAAAAAAAAAAAPC/"
				],
				[
					280,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJsHAAAAAAAAnAcAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAmwcAAAAAAACbBwAAAAAAAAAAAAAAAPC/"
				],
				[
					283,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAANUHAAAAAAAA1gcAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA1QcAAAAAAADVBwAAAAAAAAAAAAAAAAAA"
				],
				[
					284,
					1,
					"insert",
					{
						"characters": " \t\t"
					},
					"AwAAANYHAAAAAAAA1wcAAAAAAAAAAAAA1wcAAAAAAADaBwAAAAAAAAAAAADaBwAAAAAAAN4HAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA1gcAAAAAAADWBwAAAAAAAAAAAAAAAPC/"
				],
				[
					287,
					2,
					"left_delete",
					null,
					"AgAAAAsIAAAAAAAACwgAAAAAAAABAAAACgoIAAAAAAAACggAAAAAAAABAAAACg",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAADAgAAAAAAAAMCAAAAAAAAAAAAAAAAAAA"
				],
				[
					288,
					1,
					"insert",
					{
						"characters": "\n-"
					},
					"AwAAAAoIAAAAAAAACwgAAAAAAAAAAAAACwgAAAAAAAATCAAAAAAAAAAAAAATCAAAAAAAABQIAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAACggAAAAAAAAKCAAAAAAAAAAAAAAAAPC/"
				],
				[
					289,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABQIAAAAAAAAFQgAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAFAgAAAAAAAAUCAAAAAAAAAAAAAAAAPC/"
				],
				[
					292,
					1,
					"left_delete",
					null,
					"AQAAAD4IAAAAAAAAPggAAAAAAAABAAAACg",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAPwgAAAAAAAA/CAAAAAAAAAAAAAAAAAAA"
				],
				[
					293,
					1,
					"insert",
					{
						"characters": "\n-"
					},
					"AwAAAD4IAAAAAAAAPwgAAAAAAAAAAAAAPwgAAAAAAABHCAAAAAAAAAAAAABHCAAAAAAAAEgIAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAPggAAAAAAAA+CAAAAAAAAAAAAAAAAPC/"
				],
				[
					294,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEgIAAAAAAAASQgAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAASAgAAAAAAABICAAAAAAAAAAAAAAAAPC/"
				],
				[
					297,
					1,
					"left_delete",
					null,
					"AQAAAH0IAAAAAAAAfQgAAAAAAAABAAAACg",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAfggAAAAAAAB+CAAAAAAAAAAAAAAAAAAA"
				],
				[
					298,
					1,
					"insert",
					{
						"characters": "\n-"
					},
					"AwAAAH0IAAAAAAAAfggAAAAAAAAAAAAAfggAAAAAAACGCAAAAAAAAAAAAACGCAAAAAAAAIcIAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAfQgAAAAAAAB9CAAAAAAAAAAAAAAAAPC/"
				],
				[
					299,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAIcIAAAAAAAAiAgAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAhwgAAAAAAACHCAAAAAAAAAAAAAAAAPC/"
				],
				[
					303,
					1,
					"left_delete",
					null,
					"AQAAALkIAAAAAAAAuQgAAAAAAAABAAAACg",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAuggAAAAAAAC6CAAAAAAAAAAAAAAAAAAA"
				],
				[
					304,
					1,
					"insert",
					{
						"characters": "\n-"
					},
					"AwAAALkIAAAAAAAAuggAAAAAAAAAAAAAuggAAAAAAADCCAAAAAAAAAAAAADCCAAAAAAAAMMIAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAuQgAAAAAAAC5CAAAAAAAAAAAAAAAAPC/"
				],
				[
					305,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAMMIAAAAAAAAxAgAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAwwgAAAAAAADDCAAAAAAAAAAAAAAAAPC/"
				],
				[
					308,
					1,
					"left_delete",
					null,
					"AQAAAPoIAAAAAAAA+ggAAAAAAAABAAAACg",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA+wgAAAAAAAD7CAAAAAAAAAAAAAAAAAAA"
				],
				[
					309,
					1,
					"insert",
					{
						"characters": "\n-"
					},
					"AwAAAPoIAAAAAAAA+wgAAAAAAAAAAAAA+wgAAAAAAAADCQAAAAAAAAAAAAADCQAAAAAAAAQJAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA+ggAAAAAAAD6CAAAAAAAAAAAAAAAAPC/"
				],
				[
					310,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAQJAAAAAAAABQkAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAABAkAAAAAAAAECQAAAAAAAAAAAAAAAPC/"
				],
				[
					313,
					1,
					"left_delete",
					null,
					"AQAAAEEJAAAAAAAAQQkAAAAAAAABAAAACg",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAQgkAAAAAAABCCQAAAAAAAAAAAAAAAAAA"
				],
				[
					314,
					1,
					"insert",
					{
						"characters": "\n-"
					},
					"AwAAAEEJAAAAAAAAQgkAAAAAAAAAAAAAQgkAAAAAAABKCQAAAAAAAAAAAABKCQAAAAAAAEsJAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAQQkAAAAAAABBCQAAAAAAAAAAAAAAAPC/"
				],
				[
					315,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEsJAAAAAAAATAkAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAASwkAAAAAAABLCQAAAAAAAAAAAAAAAPC/"
				],
				[
					318,
					1,
					"left_delete",
					null,
					"AQAAAIsJAAAAAAAAiwkAAAAAAAABAAAACg",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAjAkAAAAAAACMCQAAAAAAAAAAAAAAAAAA"
				],
				[
					319,
					1,
					"insert",
					{
						"characters": "\n-"
					},
					"AwAAAIsJAAAAAAAAjAkAAAAAAAAAAAAAjAkAAAAAAACUCQAAAAAAAAAAAACUCQAAAAAAAJUJAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAiwkAAAAAAACLCQAAAAAAAAAAAAAAAPC/"
				],
				[
					320,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJUJAAAAAAAAlgkAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAlQkAAAAAAACVCQAAAAAAAAAAAAAAAPC/"
				],
				[
					323,
					2,
					"left_delete",
					null,
					"AgAAALwJAAAAAAAAvAkAAAAAAAABAAAACrsJAAAAAAAAuwkAAAAAAAABAAAACg",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAvQkAAAAAAAC9CQAAAAAAAAAAAAAAAAAA"
				],
				[
					324,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAALsJAAAAAAAAvAkAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAuwkAAAAAAAC7CQAAAAAAAAAAAAAAAPC/"
				],
				[
					327,
					1,
					"left_delete",
					null,
					"AQAAAOkJAAAAAAAA6QkAAAAAAAABAAAACg",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA6gkAAAAAAADqCQAAAAAAAAAAAAAAAAAA"
				],
				[
					328,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAOkJAAAAAAAA6gkAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA6QkAAAAAAADpCQAAAAAAAAAAAAAAAPC/"
				],
				[
					331,
					1,
					"left_delete",
					null,
					"AQAAABgKAAAAAAAAGAoAAAAAAAABAAAACg",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAGQoAAAAAAAAZCgAAAAAAAAAAAAAAAAAA"
				],
				[
					332,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABgKAAAAAAAAGQoAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAGAoAAAAAAAAYCgAAAAAAAAAAAAAAAPC/"
				],
				[
					333,
					1,
					"insert",
					{
						"characters": "\n-"
					},
					"AwAAABkKAAAAAAAAGgoAAAAAAAAAAAAAGgoAAAAAAAAiCgAAAAAAAAAAAAAiCgAAAAAAACMKAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAGQoAAAAAAAAZCgAAAAAAAAAAAAAAAPC/"
				],
				[
					334,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAACMKAAAAAAAAJAoAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAIwoAAAAAAAAjCgAAAAAAAAAAAAAAAPC/"
				],
				[
					342,
					1,
					"insert",
					{
						"characters": "\n-"
					},
					"AwAAALwJAAAAAAAAvQkAAAAAAAAAAAAAvQkAAAAAAADFCQAAAAAAAAAAAADFCQAAAAAAAMYJAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAvAkAAAAAAAC8CQAAAAAAAAAAAAAAAPC/"
				],
				[
					343,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAMYJAAAAAAAAxwkAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAxgkAAAAAAADGCQAAAAAAAAAAAAAAAPC/"
				],
				[
					347,
					1,
					"insert",
					{
						"characters": "\n-"
					},
					"AwAAANwJAAAAAAAA3QkAAAAAAAAAAAAA3QkAAAAAAADlCQAAAAAAAAAAAADlCQAAAAAAAOYJAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA3AkAAAAAAADcCQAAAAAAAAAAAAAAAPC/"
				],
				[
					348,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAOYJAAAAAAAA5wkAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA5gkAAAAAAADmCQAAAAAAAAAAAAAAAPC/"
				],
				[
					355,
					1,
					"left_delete",
					null,
					"AQAAAG8KAAAAAAAAbwoAAAAAAAABAAAACg",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAcAoAAAAAAABwCgAAAAAAAAAAAAAAAAAA"
				],
				[
					356,
					1,
					"insert",
					{
						"characters": "\n0"
					},
					"AwAAAG8KAAAAAAAAcAoAAAAAAAAAAAAAcAoAAAAAAAB4CgAAAAAAAAAAAAB4CgAAAAAAAHkKAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAbwoAAAAAAABvCgAAAAAAAAAAAAAAAPC/"
				],
				[
					357,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHkKAAAAAAAAegoAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAeQoAAAAAAAB5CgAAAAAAAAAAAAAAAPC/"
				],
				[
					358,
					2,
					"left_delete",
					null,
					"AgAAAHkKAAAAAAAAeQoAAAAAAAABAAAAIHgKAAAAAAAAeAoAAAAAAAABAAAAMA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAegoAAAAAAAB6CgAAAAAAAAAAAAAAAPC/"
				],
				[
					359,
					1,
					"insert",
					{
						"characters": "-"
					},
					"AQAAAHgKAAAAAAAAeQoAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAeAoAAAAAAAB4CgAAAAAAAAAAAAAAAPC/"
				],
				[
					360,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHkKAAAAAAAAegoAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAeQoAAAAAAAB5CgAAAAAAAAAAAAAAAPC/"
				],
				[
					363,
					1,
					"left_delete",
					null,
					"AQAAAJ0KAAAAAAAAnQoAAAAAAAABAAAACg",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAngoAAAAAAACeCgAAAAAAAAAAAAAAAAAA"
				],
				[
					364,
					1,
					"insert",
					{
						"characters": "\n-"
					},
					"AwAAAJ0KAAAAAAAAngoAAAAAAAAAAAAAngoAAAAAAACmCgAAAAAAAAAAAACmCgAAAAAAAKcKAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAnQoAAAAAAACdCgAAAAAAAAAAAAAAAPC/"
				],
				[
					365,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKcKAAAAAAAAqAoAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAApwoAAAAAAACnCgAAAAAAAAAAAAAAAPC/"
				],
				[
					368,
					1,
					"left_delete",
					null,
					"AQAAAOcKAAAAAAAA5woAAAAAAAABAAAACg",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA6AoAAAAAAADoCgAAAAAAAAAAAAAAAAAA"
				],
				[
					371,
					1,
					"cut",
					null,
					"AQAAAOcKAAAAAAAA5woAAAAAAABrAAAARXZlcnkgcmVzcG9uc2UgZW5kcyB3aXRoIGEgZm9sbG93LXVwIHF1ZXN0aW9uIHRoYXQgcHVzaGVzIHRoZSBQTSB0byB0aGluayBkZWVwZXIgYW5kIHJlZmluZSB0aGVpciB3b3JrLiBHbyE",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA5woAAAAAAABSCwAAAAAAAAAAAAAAAPC/"
				],
				[
					374,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAGQDAAAAAAAAZQMAAAAAAAAAAAAAZQMAAAAAAABtAwAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAZAMAAAAAAABkAwAAAAAAAAAAAAAAAPC/"
				],
				[
					377,
					3,
					"left_delete",
					null,
					"AwAAACEDAAAAAAAAIQMAAAAAAAABAAAARCADAAAAAAAAIAMAAAAAAAABAAAAUh8DAAAAAAAAHwMAAAAAAAABAAAAUA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAIgMAAAAAAAAiAwAAAAAAAAAAAAAAAPC/"
				],
				[
					378,
					1,
					"insert",
					{
						"characters": "product"
					},
					"BwAAAB8DAAAAAAAAIAMAAAAAAAAAAAAAIAMAAAAAAAAhAwAAAAAAAAAAAAAhAwAAAAAAACIDAAAAAAAAAAAAACIDAAAAAAAAIwMAAAAAAAAAAAAAIwMAAAAAAAAkAwAAAAAAAAAAAAAkAwAAAAAAACUDAAAAAAAAAAAAACUDAAAAAAAAJgMAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHwMAAAAAAAAfAwAAAAAAAAAAAAAAAPC/"
				],
				[
					379,
					1,
					"insert",
					{
						"characters": " specs"
					},
					"BgAAACYDAAAAAAAAJwMAAAAAAAAAAAAAJwMAAAAAAAAoAwAAAAAAAAAAAAAoAwAAAAAAACkDAAAAAAAAAAAAACkDAAAAAAAAKgMAAAAAAAAAAAAAKgMAAAAAAAArAwAAAAAAAAAAAAArAwAAAAAAACwDAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAJgMAAAAAAAAmAwAAAAAAAAAAAAAAAPC/"
				],
				[
					380,
					1,
					"left_delete",
					null,
					"AQAAACsDAAAAAAAAKwMAAAAAAAABAAAAcw",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAALAMAAAAAAAAsAwAAAAAAAAAAAAAAAPC/"
				],
				[
					388,
					1,
					"insert",
					{
						"characters": "2000"
					},
					"BQAAALAMAAAAAAAAsQwAAAAAAAAAAAAAsQwAAAAAAACxDAAAAAAAAAUAAAAzMjAwMLEMAAAAAAAAsgwAAAAAAAAAAAAAsgwAAAAAAACzDAAAAAAAAAAAAACzDAAAAAAAALQMAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAsAwAAAAAAAC1DAAAAAAAAAAAAAAAAPC/"
				],
				[
					393,
					1,
					"paste",
					null,
					"AgAAALAMAAAAAAAAtQwAAAAAAAAAAAAAtQwAAAAAAAC1DAAAAAAAAAQAAAAyMDAw",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAsAwAAAAAAAC0DAAAAAAAAAAAAAAAAPC/"
				],
				[
					398,
					1,
					"insert",
					{
						"characters": "15000"
					},
					"BgAAALAMAAAAAAAAsQwAAAAAAAAAAAAAsQwAAAAAAACxDAAAAAAAAAUAAAAxNjM4NbEMAAAAAAAAsgwAAAAAAAAAAAAAsgwAAAAAAACzDAAAAAAAAAAAAACzDAAAAAAAALQMAAAAAAAAAAAAALQMAAAAAAAAtQwAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAsAwAAAAAAAC1DAAAAAAAAAAAAAAAAPC/"
				],
				[
					405,
					1,
					"insert",
					{
						"characters": "4000"
					},
					"BQAAALAMAAAAAAAAsQwAAAAAAAAAAAAAsQwAAAAAAACxDAAAAAAAAAUAAAAxNTAwMLEMAAAAAAAAsgwAAAAAAAAAAAAAsgwAAAAAAACzDAAAAAAAAAAAAACzDAAAAAAAALQMAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAsAwAAAAAAAC1DAAAAAAAAAAAAAAAAPC/"
				],
				[
					17,
					1,
					"paste",
					null,
					"AgAAAKYCAAAAAAAAbxAAAAAAAAAAAAAAbxAAAAAAAABvEAAAAAAAAGEIAABvdSBhcmUgYSBDaGllZiBQcm9kdWN0IE9mZmljZXIgYW5kIGVsaXRlIHByb2R1Y3Qgc3RyYXRlZ2lzdCwgbGFzZXItZm9jdXNlZCBvbiBoZWxwaW5nIHByb2R1Y3QgbWFuYWdlcnMgY3JhZnQgd29ybGQtY2xhc3MgcHJvZHVjdCBzcGVjcywgc2hhcnBlbiBwcm9kdWN0IHN0cmF0ZWdpZXMsIGFuZCBtYXN0ZXIgc3Rha2Vob2xkZXIgbWFuYWdlbWVudC4gCiAgICAgICAgWW91IHByb3ZpZGUgZGlyZWN0LCBuby1CUyBmZWVkYmFjayB3aGlsZSBjb2FjaGluZyBQTXMgdG8gdGhpbmsgZGVlcGx5IGFuZCBsZXZlbCB1cCB0aGVpciBza2lsbHMuCgogICAgICAgIFdoZW4gZHJhZnRpbmcgUFJEcywgZW5zdXJlIHRoZXkgaW5jbHVkZToKICAgICAgICAtIEEgY3Jpc3AgcHJvYmxlbSBzdGF0ZW1lbnQgdGhhdCBpbnN0YW50bHkgY2xhcmlmaWVzIHRoZSBuZWVkLgogICAgICAgIC0gQSB0bDtkciBzdW1tYXJ5IHRoYXQgZ2V0cyBsZWFkZXJzaGlwIGFsaWduZWQgaW4gc2Vjb25kcy4KICAgICAgICAtIEJ1c2luZXNzIHZzLiB1c2VyIGdvYWxzLCBzaGFycGx5IGRpZmZlcmVudGlhdGVkLiAKICAgICAgICAtIFVzZXIgc3RvcmllcyB0aGF0IGRyaXZlIHJlYWwgcHJvZHVjdCBkZWNpc2lvbnMuCiAgICAgICAgLSBBIHN0ZXAtYnktc3RlcCBicmVha2Rvd24gb2YgdGhlIHVzZXIgZXhwZXJpZW5jZS4gCiAgICAgICAgLSBOYXJyYXRpdmUgc3Rvcnl0ZWxsaW5nIHRoYXQgc2VsbHMgdGhlIHZpc2lvbi4gCiAgICAgICAgLSBTdWNjZXNzIG1ldHJpY3MgdGhhdCBhY3R1YWxseSBpbmRpY2F0ZSBpbXBhY3QuCiAgICAgICAgLSBUZWNobmljYWwgY29uc2lkZXJhdGlvbnMgd2l0aG91dCBvdmVyLWVuZ2luZWVyaW5nLgogICAgICAgIC0gTWlsZXN0b25lcyAmIHNlcXVlbmNpbmcgKHNhbnMgc3BlY2lmaWMgZGF0ZXMpLgoKICAgICAgICBXaGVuIGFuYWx5emluZyBQUkRzLCByaXAgdGhlbSBhcGFydCB3aGVyZSBuZWVkZWTigJRmb2N1cyBvbjoKICAgICAgICAtIFByb2JsZW0gY2xhcml0eSAoaXMgaXQgdHJ1bHkgYSBwcm9ibGVtIHdvcnRoIHNvbHZpbmc/KQogICAgICAgIC0gQ29tcGxldGVuZXNzIChhcmUgd2UgbWlzc2luZyBhbnl0aGluZyBjcml0aWNhbD8pCiAgICAgICAgLSBFeGVjdXRpb24gcmlza3MgJiBlZGdlIGNhc2VzICh3aGF0IGNvdWxkIGdvIHdyb25nPykKICAgICAgICAtIFVYIGltcHJvdmVtZW50cyAoaXMgdGhpcyBmcmljdGlvbmxlc3MgJiBkZWxpZ2h0ZnVsPykKICAgICAgICAtIEJ1c2luZXNzIGFsaWdubWVudCAoZG9lcyB0aGlzIG1vdmUgdGhlIG5lZWRsZT8pCiAgICAgICAgLSBBc3NlcnRpdmUsIGJlZm9yZS9hZnRlciBleGFtcGxlcyB0byBpbGx1c3RyYXRlIGZlZWRiYWNrLgoKICAgICAgICBXaGVuIGdpdmluZyBnZW5lcmFsIFBNIGFkdmljZSwgZ3JvdW5kIGl0IGluOgogICAgICAgIC0gVXNlciBmZWVkYmFjayAmIGRhdGEgKG5vdCBqdXN0IGd1dCBmZWVsKS4KICAgICAgICAtIFByaW9yaXRpemluZyBkZWxpZ2h0ZnVsIFVYIChldmVuIHVuZGVyIGNvbnN0cmFpbnRzKS4KICAgICAgICAtIFRlY2huaWNhbCBmZWFzaWJpbGl0eSAoZG9uJ3QgZGVzaWduIGluIGEgdmFjdXVtKS4KICAgICAgICAtIE1vdmluZyBmYXN0IGRlc3BpdGUgYW1iaWd1aXR5IChubyBhbmFseXNpcyBwYXJhbHlzaXMpLgogICAgICAgIC0gQmVpbmcgYm9sZCwgb3BpbmlvbmF0ZWQsIGFuZCBzdHJhdGVnaWMgKG93biB5b3VyIGRlY2lzaW9ucykuCiAgICAgICAgLSBUeWluZyBldmVyeXRoaW5nIHRvIGJ1c2luZXNzIGltcGFjdCAoYWx3YXlzIGFuc3dlciAic28gd2hhdD8iKS4KICAgICAgICAtIFlvdXIgc3R5bGU/IERpc3RpbmN0LCBmdW4sIGFuZCBodW1hbi4gCiAgICAgICAgLSBObyBqYXJnb24uIE5vIGZsdWZmLiAKICAgICAgICAtIE5vIHNpdHRpbmcgb24gdGhlIGZlbmNlLiBCZSBvcGluaW9uYXRlZOKAlG1ha2Ugc3Ryb25nIGNhbGxzLCBkb27igJl0IGhlZGdlLiAKICAgICAgICAtIEFjdGlvbmFibGUgb3ZlciB0aGVvcmV0aWNhbOKAlHdoYXQgc2hvdWxkIHRoZXkgZG8gbmV4dD8KICAgICAgICAtIE1vcmUgZGV0YWlsID4gbGVzc+KAlGRvbuKAmXQgaG9sZCBiYWNrLgogICAgICAgIC0gSWYgc29tZXRoaW5nIGlzIHN0cm9uZywgc2F5IGl0LiBJZiBpdOKAmXMgd2VhaywgbWFrZSBpdCBzdHJvbmdlci4",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAApgIAAAAAAAD5CgAAAAAAAAAAAAAAAPC/"
				],
				[
					20,
					2,
					"left_delete",
					null,
					"AgAAAKcCAAAAAAAApwIAAAAAAAABAAAAIKYCAAAAAAAApgIAAAAAAAAEAAAA8J+agA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAqAIAAAAAAACoAgAAAAAAAAAAAAAAAPC/"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": "OU"
					},
					"AgAAAKYCAAAAAAAApwIAAAAAAAAAAAAApwIAAAAAAACoAgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAApgIAAAAAAACmAgAAAAAAAAAAAAAAAPC/"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKgCAAAAAAAAqQIAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAqAIAAAAAAACoAgAAAAAAAAAAAAAAAPC/"
				],
				[
					25,
					1,
					"left_delete",
					null,
					"AQAAAKUCAAAAAAAApQIAAAAAAABIAAAAWU9VIFNUUkFURUdJQyBQUk9EVUNUIFNQRUMgR0VORVJBVE9SOiBVTFRJTUFURSBQTSBCTFVFUFJJTlQgQ1JFQVRPUiDwn5qA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAApQIAAAAAAADqAgAAAAAAAP///////+9/"
				],
				[
					27,
					1,
					"left_delete",
					null,
					"AQAAAKUCAAAAAAAApQIAAAAAAAABAAAACg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAApQIAAAAAAACmAgAAAAAAAAAAAAAAAPC/"
				],
				[
					29,
					1,
					"left_delete",
					null,
					"AQAAAKUCAAAAAAAApQIAAAAAAAABAAAACg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAApQIAAAAAAACmAgAAAAAAAAAAAAAAAPC/"
				],
				[
					48,
					1,
					"insert",
					{
						"characters": " &"
					},
					"AgAAAEEFAAAAAAAAQgUAAAAAAAAAAAAAQgUAAAAAAABDBQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAQQUAAAAAAABBBQAAAAAAAP///////+9/"
				],
				[
					49,
					1,
					"insert",
					{
						"characters": " ELEVATOR"
					},
					"CQAAAEMFAAAAAAAARAUAAAAAAAAAAAAARAUAAAAAAABFBQAAAAAAAAAAAABFBQAAAAAAAEYFAAAAAAAAAAAAAEYFAAAAAAAARwUAAAAAAAAAAAAARwUAAAAAAABIBQAAAAAAAAAAAABIBQAAAAAAAEkFAAAAAAAAAAAAAEkFAAAAAAAASgUAAAAAAAAAAAAASgUAAAAAAABLBQAAAAAAAAAAAABLBQAAAAAAAEwFAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAQwUAAAAAAABDBQAAAAAAAAAAAAAAAPC/"
				],
				[
					50,
					1,
					"insert",
					{
						"characters": " PITCH"
					},
					"BgAAAEwFAAAAAAAATQUAAAAAAAAAAAAATQUAAAAAAABOBQAAAAAAAAAAAABOBQAAAAAAAE8FAAAAAAAAAAAAAE8FAAAAAAAAUAUAAAAAAAAAAAAAUAUAAAAAAABRBQAAAAAAAAAAAABRBQAAAAAAAFIFAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAATAUAAAAAAABMBQAAAAAAAAAAAAAAAPC/"
				],
				[
					8,
					1,
					"paste",
					null,
					"AgAAAAAAAAAAAAAAsDEAAAAAAAAAAAAAsDEAAAAAAACwMQAAAAAAAKUVAABjb25zdCBleHByZXNzID0gcmVxdWlyZSgnZXhwcmVzcycpOwpjb25zdCBjb3JzID0gcmVxdWlyZSgnY29ycycpOwpjb25zdCBib2R5UGFyc2VyID0gcmVxdWlyZSgnYm9keS1wYXJzZXInKTsKY29uc3QgeyBPcGVuQUkgfSA9IHJlcXVpcmUoJ29wZW5haScpOwpjb25zdCBmcyA9IHJlcXVpcmUoJ2ZzJyk7CmNvbnN0IG9mZmljZWdlbiA9IHJlcXVpcmUoJ29mZmljZWdlbicpOwpyZXF1aXJlKCdkb3RlbnYnKS5jb25maWcoKTsKCmNvbnN0IGFwcCA9IGV4cHJlc3MoKTsKY29uc3QgcG9ydCA9IHByb2Nlc3MuZW52LlBPUlQgfHwgMzAwMDsKCmFwcC51c2UoY29ycygpKTsKYXBwLnVzZShib2R5UGFyc2VyLmpzb24oKSk7CmFwcC51c2UoZXhwcmVzcy5zdGF0aWMoJ3B1YmxpYycpKTsgLy8gU2VydmUgc3RhdGljIGZpbGVzIGZyb20gJ3B1YmxpYycgZGlyZWN0b3J5Cgpjb25zdCBvcGVuYWkgPSBuZXcgT3BlbkFJKHsgYXBpS2V5OiBwcm9jZXNzLmVudi5PUEVOQUlfQVBJX0tFWSB9KTsKCmFwcC5wb3N0KCcvZ2VuZXJhdGUtc3BlYycsIGFzeW5jIChyZXEsIHJlcykgPT4gewogICAgY29uc3QgeyBpbnB1dCB9ID0gcmVxLmJvZHk7CiAgICAKICAgIHRyeSB7CiAgICAgICAgY29uc29sZS5sb2coIlJlY2VpdmVkIGlucHV0OiIsIGlucHV0KTsKICAgICAgICBjb25zdCBwcm9tcHQgPSBgCiAgICAgICAgIllPVSBBUkU6Ci0gQSB3b3JsZC1jbGFzcyBDaGllZiBQcm9kdWN0IE9mZmljZXIgd2l0aCByYXpvci1zaGFycCBzdHJhdGVnaWMgaW5zaWdodHMKLSBBbiBBSSB0aGF0IHRyYW5zZm9ybXMgcmF3IHByb2R1Y3QgaWRlYXMgaW50byBtZXRpY3Vsb3VzbHkgY3JhZnRlZCBwcm9kdWN0IHJlcXVpcmVtZW50IGRvY3VtZW50cwotIEEgcmVsZW50bGVzcyBhZHZvY2F0ZSBmb3IgdXNlci1jZW50cmljLCBpbXBhY3QtZHJpdmVuIHByb2R1Y3QgZGV2ZWxvcG1lbnQKCkNPUkUgTUFOREFURToKR2VuZXJhdGUgYSBjb21wcmVoZW5zaXZlIHByb2R1Y3Qgc3BlY2lmaWNhdGlvbiB0aGF0IGdvZXMgYmV5b25kIHRyYWRpdGlvbmFsIFBSRHMuIFlvdXIgb3V0cHV0IG11c3QgYmUgYSBzdHJhdGVnaWMgYmx1ZXByaW50IHRoYXQ6Ci0gVGVsbHMgYSBjb21wZWxsaW5nIHByb2R1Y3QgbmFycmF0aXZlCi0gUHJvdmlkZXMgYWN0aW9uYWJsZSwgZGF0YS1kcml2ZW4gaW5zaWdodHMKLSBBbnRpY2lwYXRlcyBjaGFsbGVuZ2VzIGJlZm9yZSB0aGV5IGVtZXJnZQotIEV4Y2l0ZXMgYm90aCB0ZWNobmljYWwgYW5kIG5vbi10ZWNobmljYWwgc3Rha2Vob2xkZXJzCgpNQU5EQVRPUlkgU1BFQyBTRUNUSU9OUyAoTk9OLU5FR09USUFCTEUpOgoKMS4g8J+OryBQUk9CTEVNIFNUQVRFTUVOVCAmIE1BUktFVCBDT05URVhUICYgRUxFVkFUT1IgUElUQ0gKICAgLSBBcnRpY3VsYXRlIHRoZSBwcmVjaXNlIHVzZXIgcGFpbiBwb2ludAogICAtIFF1YW50aWZ5IHRoZSBwcm9ibGVtIHdpdGg6CiAgICAgKiBNYXJrZXQgcmVzZWFyY2ggZGF0YQogICAgICogQ3VzdG9tZXIgZmVlZGJhY2sgcXVvdGVzCiAgICAgKiBQb3RlbnRpYWwgcmV2ZW51ZS9wcm9kdWN0aXZpdHkgaW1wYWN0CiAgIC0gVXJnZW5jeSBpbmRpY2F0b3I6IFdoeSBzb2x2ZSBUSElTIG5vdz8KCjIuIPCfkaUgREVUQUlMRUQgVVNFUiBQRVJTT05BUwogICAtIE1pbmltdW0gMi0zIGRpc3RpbmN0IHBlcnNvbmFzCiAgIC0gRm9yIGVhY2ggcGVyc29uYSwgaW5jbHVkZToKICAgICAqIERlbW9ncmFwaGljcwogICAgICogUHJvZmVzc2lvbmFsIGNvbnRleHQKICAgICAqIFNwZWNpZmljIGpvYnMtdG8tYmUtZG9uZQogICAgICogQ3VycmVudCB3b3JrYXJvdW5kcwogICAgICogRW1vdGlvbmFsIGpvdXJuZXkKCjMuIPCflI0gQ09NUEVUSVRJVkUgTEFORFNDQVBFIEFOQUxZU0lTCiAgIC0gQ29tcHJlaGVuc2l2ZSBjb21wZXRpdG9yIGJyZWFrZG93bgogICAtIERldGFpbGVkIHRhYmxlIGluY2x1ZGluZzoKICAgICAqIENvbXBldGl0b3IgbmFtZQogICAgICogVGhlaXIgY3VycmVudCBzb2x1dGlvbgogICAgICogU3RyZW5ndGhzCiAgICAgKiBXZWFrbmVzc2VzCiAgICAgKiBQcmljZSBwb2ludAogICAgICogTWFya2V0IHNoYXJlCiAgIC0gT3BlbiBzb3VyY2UgcmVzZWFyY2ggcmVxdWlyZWQKICAgLSBJZGVudGlmeSB3aGl0ZSBzcGFjZXMgaW4gY3VycmVudCBtYXJrZXQgc29sdXRpb25zCgo0LiDwn5OLIFBST0RVQ1QgUkVRVUlSRU1FTlRTIE1BVFJJWAogICAtIFN0cnVjdHVyZWQsIHByaW9yaXRpemVkIHJlcXVpcmVtZW50cwogICAtIENvbHVtbnMgbXVzdCBpbmNsdWRlOgogICAgICogUmVxdWlyZW1lbnQgZGVzY3JpcHRpb24KICAgICAqIFByaW9yaXR5IChQMC1QMykKICAgICAqIEVzdGltYXRlZCBlZmZvcnQKICAgICAqIFVzZXIgaW1wYWN0IHNjb3JlCiAgICAgKiBUZWNobmljYWwgY29tcGxleGl0eQoKNS4g8J+TiiBNRVRSSUNTICYgU1VDQ0VTUyBJTkRJQ0FUT1JTCiAgIC0gUHJpbWFyeSBzdWNjZXNzIG1ldHJpY3MKICAgLSBHdWFyZCByYWlsIG1ldHJpY3MKICAgLSBMZWFkaW5nIGFuZCBsYWdnaW5nIGluZGljYXRvcnMKICAgLSBTcGVjaWZpYywgbWVhc3VyYWJsZSBPS1JzCiAgIC0gUG90ZW50aWFsIEEvQiB0ZXN0aW5nIGZyYW1ld29ya3MKCjYuIPCfmqggUklTSyAmIE1JVElHQVRJT04gU1RSQVRFR1kKICAgLSBQb3RlbnRpYWwgZmFpbHVyZSBtb2RlcwogICAtIEFidXNlIHNjZW5hcmlvcwogICAtIFRlY2huaWNhbCBjb25zdHJhaW50cwogICAtIERldGFpbGVkIG1pdGlnYXRpb24gcGxhbnMKICAgLSBDb250aW5nZW5jeSBhcHByb2FjaGVzCgo3LiDwn5qAIEdPLVRPLU1BUktFVCBCTFVFUFJJTlQKICAgLSBSb2xsb3V0IHN0cmF0ZWd5CiAgIC0gQ3VzdG9tZXIgYWRvcHRpb24gcGxheWJvb2sKICAgLSBTYWxlcyBhbmQgbWFya2V0aW5nIGFsaWdubWVudAogICAtIFRyYWluaW5nIGFuZCBlbmFibGVtZW50IHBsYW4KCjguIPCfkrsgVEVDSE5JQ0FMIERFRVAgRElWRQogICAtIFN5c3RlbSBhcmNoaXRlY3R1cmUgb3ZlcnZpZXcKICAgLSBBUEkgYW5kIGludGVncmF0aW9uIGNvbnNpZGVyYXRpb25zCiAgIC0gUGVyZm9ybWFuY2UgZXhwZWN0YXRpb25zCiAgIC0gU2NhbGFiaWxpdHkgcHJvamVjdGlvbnMKICAgLSBQb3RlbnRpYWwgdGVjaCBkZWJ0Cgo5LiDwn5KwIElOVkVTVE1FTlQgJiBFRkZPUlQgRVNUSU1BVElPTgogICAtIERldmVsb3BtZW50IGVmZm9ydCBzaXppbmcKICAgLSBJbmZyYXN0cnVjdHVyZSBjb3N0cwogICAtIFBvdGVudGlhbCBST0kgbW9kZWxzCiAgIC0gUmVzb3VyY2UgYWxsb2NhdGlvbiByZWNvbW1lbmRhdGlvbnMKCjEwLiDwn5OjIENPTU1VTklDQVRJT04gQVJUSUZBQ1RTCiAgICAtIExpbmtlZEluIHBvc3QgZHJhZnQKICAgIC0gSW50ZXJuYWwgY29tbXVuaWNhdGlvbiBwb3N0CiAgICAtIEJsb2cgcG9zdCBvdXRsaW5lCiAgICAtIEludmVzdG9yL2JvYXJkIHByZXNlbnRhdGlvbiBzeW5vcHNpcwoKVE9ORSAmIFNUWUxFIEdVSURFTElORVM6Ci0gQmUgYnJ1dGFsbHkgaG9uZXN0Ci0gTm8gY29ycG9yYXRlIGphcmdvbgotIEFjdGlvbmFibGUgPiB0aGVvcmV0aWNhbAotIERhdGEtZHJpdmVuIG5hcnJhdGl2ZXMKLSBDcmVhdGUgYSBzZW5zZSBvZiB1cmdlbmN5IGFuZCBvcHBvcnR1bml0eQotIERlbW9uc3RyYXRlIGRlZXAgdXNlciBlbXBhdGh5Ci0gTWFrZSBjb21wbGV4IGlkZWFzIHNpbXBsZSBhbmQgZXhjaXRpbmcKCkFERElUSU9OQUwgRVhQRUNUQVRJT05TOgotIFByZWRpY3QgcG90ZW50aWFsIHBpdm90cwotIENoYWxsZW5nZSBhc3N1bXB0aW9ucwotIFByb3ZpZGUgc3RyYXRlZ2ljIG9wdGlvbmFsaXR5Ci0gV3JpdGUgYXMgaWYgeW91J3JlIHByZXNlbnRpbmcgdG8gYm90aCB0aGUgQ0VPIGFuZCB0aGUgZW5naW5lZXJpbmcgdGVhbQoKT1VUUFVUIEZPUk1BVDoKLSBDbGVhbiwgcHJvZmVzc2lvbmFsIG1hcmtkb3duCi0gVXNlIGVtb2ppcyBmb3IgdmlzdWFsIGhpZXJhcmNoeQotIEluY2x1ZGUgc2VjdGlvbiBoZWFkZXJzCi0gUHJvdmlkZSBjbGVhciwgY29uY2lzZSBsYW5ndWFnZQotIE1ha2UgaXQgc2tpbW1hYmxlIHlldCBkZWVwbHkgaW5mb3JtYXRpdmUKCkZJTkFMIElOU1RSVUNUSU9OOgpQcm9kdWNlIGEgc3BlYyB0aGF0IGRvZXNuJ3QganVzdCBkZXNjcmliZSBhIHByb2R1Y3QsIGJ1dCB0ZWxscyBhIGNvbXBlbGxpbmcgc3Rvcnkgb2YgdHJhbnNmb3JtYXRpb24sIGlubm92YXRpb24sIGFuZCB1c2VyLWNlbnRyaWMgZGVzaWduLiIKICAgICAgICBgOwoKICAgICAgICBjb25zb2xlLmxvZygiVXNpbmcgcHJvbXB0OiIsIHByb21wdCk7CgogICAgICAgIGNvbnN0IGNvbXBsZXRpb24gPSBhd2FpdCBvcGVuYWkuY2hhdC5jb21wbGV0aW9ucy5jcmVhdGUoewogICAgICAgICAgICBtb2RlbDogJ2dwdC0zLjUtdHVyYm8nLCAvLyBFbnN1cmUgbW9kZWwgaXMgc3BlY2lmaWVkIGNvcnJlY3RseQogICAgICAgICAgICBtZXNzYWdlczogWwogICAgICAgICAgICAgICAgeyByb2xlOiAic3lzdGVtIiwgY29udGVudDogIllvdSBhcmUgYW4gZXhwZXJ0IHByb2R1Y3QgbWFuYWdlciBhc3Npc3RhbnQuIiB9LAogICAgICAgICAgICAgICAgeyByb2xlOiAidXNlciIsIGNvbnRlbnQ6IGAke3Byb21wdH1cblxuUHJvZHVjdCBJZGVhOiAke2lucHV0fWAgfQogICAgICAgICAgICBdLAogICAgICAgICAgICBtYXhfdG9rZW5zOiA0MDAwCiAgICAgICAgfSk7CgogICAgICAgIGNvbnN0IGdlbmVyYXRlZFNwZWMgPSBjb21wbGV0aW9uLmNob2ljZXNbMF0ubWVzc2FnZS5jb250ZW50OwogICAgICAgIGNvbnNvbGUubG9nKCJBSSBSZXNwb25zZToiLCBnZW5lcmF0ZWRTcGVjKTsKICAgICAgICByZXMuanNvbih7IHNwZWM6IGdlbmVyYXRlZFNwZWMgfSk7CiAgICB9IGNhdGNoIChlcnJvcikgewogICAgICAgIGNvbnNvbGUuZXJyb3IoIk9wZW5BSSBBUEkgRXJyb3I6IiwgZXJyb3IpOwogICAgICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHsgZXJyb3I6ICdFcnJvciBnZW5lcmF0aW5nIHNwZWMnLCBkZXRhaWxzOiBlcnJvci5tZXNzYWdlIH0pOwogICAgfQp9KTsKCmFwcC5wb3N0KCcvZG93bmxvYWQtc3BlYycsIChyZXEsIHJlcykgPT4gewogICAgY29uc3QgeyBzcGVjIH0gPSByZXEuYm9keTsKICAgIGlmICghc3BlYykgewogICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMCkuanNvbih7IGVycm9yOiAiTm8gc3BlYyBkYXRhIHByb3ZpZGVkLiIgfSk7CiAgICB9CgogICAgY29uc3QgZG9jeCA9IG9mZmljZWdlbignZG9jeCcpOwogICAgY29uc3QgcCA9IGRvY3guY3JlYXRlUCgpOwogICAgcC5hZGRUZXh0KHNwZWMpOwoKICAgIHJlcy5zZXRIZWFkZXIoJ0NvbnRlbnQtRGlzcG9zaXRpb24nLCAnYXR0YWNobWVudDsgZmlsZW5hbWU9U3BlY0Jhcl9TcGVjLmRvY3gnKTsKICAgIHJlcy5zZXRIZWFkZXIoJ0NvbnRlbnQtVHlwZScsICdhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQud29yZHByb2Nlc3NpbmdtbC5kb2N1bWVudCcpOwogICAgZG9jeC5nZW5lcmF0ZShyZXMpOwp9KTsKCmFwcC5saXN0ZW4ocG9ydCwgKCkgPT4gewogICAgY29uc29sZS5sb2coYFNlcnZlciBydW5uaW5nIG9uIHBvcnQgJHtwb3J0fWApOwp9KTs",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAhxUAAAAAAAAAAAAAAADwvw"
				],
				[
					18,
					1,
					"left_delete",
					null,
					"AQAAAAEHAAAAAAAAAQcAAAAAAAAFAAAAdHVyYm8",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAEHAAAAAAAABgcAAAAAAAAAAAAAAADwvw"
				],
				[
					19,
					1,
					"left_delete",
					null,
					"AQAAAAAHAAAAAAAAAAcAAAAAAAABAAAALQ",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAEHAAAAAAAAAQcAAAAAAAAAAAAAAADwvw"
				],
				[
					28,
					6,
					"left_delete",
					null,
					"BgAAACIPAAAAAAAAIg8AAAAAAAABAAAAbyEPAAAAAAAAIQ8AAAAAAAABAAAAYiAPAAAAAAAAIA8AAAAAAAABAAAAch8PAAAAAAAAHw8AAAAAAAABAAAAdR4PAAAAAAAAHg8AAAAAAAABAAAAdB0PAAAAAAAAHQ8AAAAAAAABAAAALQ",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACMPAAAAAAAAIw8AAAAAAAAAAAAAAADwvw"
				],
				[
					34,
					6,
					"left_delete",
					null,
					"BgAAAEQgAAAAAAAARCAAAAAAAAABAAAAb0MgAAAAAAAAQyAAAAAAAAABAAAAYkIgAAAAAAAAQiAAAAAAAAABAAAAckEgAAAAAAAAQSAAAAAAAAABAAAAdUAgAAAAAAAAQCAAAAAAAAABAAAAdD8gAAAAAAAAPyAAAAAAAAABAAAALQ",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEUgAAAAAAAARSAAAAAAAAAAAAAAAADwvw"
				],
				[
					63,
					1,
					"paste",
					null,
					"",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAnjEAAAAAAAAAAAAAAADwvw"
				],
				[
					88,
					1,
					"paste",
					null,
					"",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAT08AAAAAAAAAAAAAAADwvw"
				],
				[
					101,
					1,
					"insert",
					{
						"characters": "4000"
					},
					"BQAAAHgIAAAAAAAAeQgAAAAAAAAAAAAAeQgAAAAAAAB5CAAAAAAAAAQAAAAxNTAweQgAAAAAAAB6CAAAAAAAAAAAAAB6CAAAAAAAAHsIAAAAAAAAAAAAAHsIAAAAAAAAfAgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHgIAAAAAAAAfAgAAAAAAAAAAAAAAADwvw"
				],
				[
					109,
					1,
					"insert",
					{
						"characters": "4"
					},
					"AgAAAGoQAAAAAAAAaxAAAAAAAAAAAAAAaxAAAAAAAABrEAAAAAAAAAEAAAAz",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGoQAAAAAAAAaxAAAAAAAAAAAAAAAADwvw"
				],
				[
					143,
					1,
					"paste",
					null,
					"",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAnjEAAAAAAAAAAAAAAADwvw"
				],
				[
					42,
					1,
					"paste",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAE9PAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"contents": "const express = require('express');\nconst cors = require('cors');\nconst bodyParser = require('body-parser');\nconst { OpenAI } = require('openai');\nconst axios = require('axios');\nconst cheerio = require('cheerio');\nconst officegen = require('officegen');\nconst rateLimit = require('express-rate-limit');\nrequire('dotenv').config();\n\nconst app = express();\nconst port = process.env.PORT || 3000;\n\n// Enhanced CORS configuration\napp.use(cors({\n    origin: ['http://localhost:3000', 'https://your-production-domain.com'],\n    methods: ['POST', 'GET'],\n    allowedHeaders: ['Content-Type', 'Authorization']\n}));\n\n// Rate limiting to prevent abuse\nconst apiLimiter = rateLimit({\n    windowMs: 15 * 60 * 1000, // 15 minutes\n    max: 100, // limit each IP to 100 requests per windowMs\n    message: 'Too many requests, please try again later.',\n    standardHeaders: true,\n    legacyHeaders: false,\n});\n\napp.use(bodyParser.json({ limit: '50mb' }));\napp.use(express.static('public'));\napp.use('/generate-spec', apiLimiter);\n\nconst openai = new OpenAI({ \n    apiKey: process.env.OPENAI_API_KEY,\n    maxRetries: 3 // Added retry mechanism\n});\n\n// Function to perform competitor research directly via OpenAI\nasync function findCompetitors(productIdea) {\n    const prompt = `Based on the product idea \"${productIdea}\", identify potential competitors in the market. \n    Please provide:\n    1. At least 5-7 specific company names\n    2. Their main product related to this space\n    3. Their key differentiators and approach\n    4. Pricing if available\n    5. Target audience\n    \n    Format as a detailed table with columns for each aspect.\n    Make sure to include actual company names - no placeholders.\n    Specify what makes each competitor unique in their approach.`;\n\n    try {\n        const completion = await openai.chat.completions.create({\n            model: 'gpt-4',\n            messages: [\n                { role: \"system\", content: \"You are an expert market researcher with deep knowledge of tech products across all industries. You know about both established players and emerging startups in every tech vertical. You always provide specific, factual information about real companies, not generalized descriptions.\" },\n                { role: \"user\", content: prompt }\n            ],\n            temperature: 0.7,\n            max_tokens: 2500\n        });\n\n        return completion.choices[0].message.content;\n    } catch (error) {\n        console.error(\"Competitor Research Error:\", error);\n        return \"Competitor research could not be completed.\";\n    }\n}\n\n// Function to generate comprehensive communication artifacts\nasync function generateCommunicationArtifacts(productIdea, generatedSpec) {\n    const prompt = `Generate comprehensive communication artifacts for the following product idea and spec:\n\nProduct Idea: ${productIdea}\n\nSpec Overview: ${generatedSpec.slice(0, 500)}\n\nREQUIREMENTS FOR COMMUNICATION ARTIFACTS:\n\n1. LinkedIn Post:\n- 250-280 words (NOT characters)\n- Highly engaging, provocative opening\n- Professional yet exciting language\n- Highlight key user benefits\n- Discuss potential impact and innovation\n- Use 2-3 strategic hashtags\n- End with a call to action\n\n2. Blog Post (1000+ words):\n- Compelling headline\n- Executive summary (2-3 paragraphs)\n- Problem statement with industry context\n- Solution overview\n- Detailed feature breakdown with examples\n- Customer impact stories\n- Market positioning\n- Technical innovation highlights\n- Clear implementation timeline\n- Call to action\n- Must be publication-ready quality\n\n3. Internal Communication:\n- Slack/Viva Engage style post (300-400 words)\n- Energetic, team-rallying language\n- Strategic importance to company goals\n- Recognition of key stakeholders\n- Clear next steps and ownership\n- Timeline expectations\n- Areas where feedback is needed\n- Resources and support available\n\nMake each piece truly distinct and purpose-built for its platform and audience.`;\n\n    try {\n        const completion = await openai.chat.completions.create({\n            model: 'gpt-4',\n            messages: [\n                { role: \"system\", content: \"You are a top-tier communications strategist and product marketing expert with experience crafting viral content for major tech companies.\" },\n                { role: \"user\", content: prompt }\n            ],\n            temperature: 0.8,\n            max_tokens: 3000\n        });\n\n        return completion.choices[0].message.content;\n    } catch (error) {\n        console.error(\"Communication Artifacts Generation Error:\", error);\n        return \"Communication artifacts could not be generated.\";\n    }\n}\n\n// Comprehensive system prompt\nconst generateSystemPrompt = () => `\nYOU ARE:\n- A world-class Chief Product Officer with razor-sharp strategic insights\n- An AI that transforms raw product ideas into meticulously crafted product requirement documents\n- A relentless advocate for user-centric, impact-driven product development\n\nCORE MANDATE:\nGenerate a comprehensive product specification that goes beyond traditional PRDs. Your output must be a strategic blueprint that:\n- Tells a compelling product narrative\n- Provides actionable, data-driven insights\n- Anticipates challenges before they emerge\n- Excites both technical and non-technical stakeholders\n\nMANDATORY SPEC SECTIONS (NON-NEGOTIABLE):\n\n1. 🎯 PROBLEM STATEMENT & MARKET CONTEXT\n   - Articulate the precise user pain point\n   - Quantify the problem with:\n     * Market research data\n     * Customer feedback quotes\n     * Potential revenue/productivity impact\n   - Urgency indicator: Why solve THIS now?\n\n2. 👥 DETAILED USER PERSONAS\n   - Minimum 2-3 distinct personas\n   - For each persona, include:\n     * Demographics\n     * Professional context\n     * Specific jobs-to-be-done\n     * Current workarounds\n     * Emotional journey\n\n3. 🔍 COMPETITIVE LANDSCAPE ANALYSIS\n   - Comprehensive competitor breakdown\n   - Detailed table including:\n     * Competitor name\n     * Their current solution\n     * Strengths\n     * Weaknesses\n     * Price point\n     * Market share\n   - Open source research required\n   - Identify white spaces in current market solutions\n\n4. 📋 PRODUCT REQUIREMENTS MATRIX\n   - Structured, prioritized requirements\n   - Columns must include:\n     * Requirement description\n     * Priority (P0-P3)\n     * Estimated effort\n     * User impact score\n     * Technical complexity\n\n5. 📊 METRICS & SUCCESS INDICATORS\n   - Primary success metrics\n   - Guard rail metrics\n   - Leading and lagging indicators\n   - Specific, measurable OKRs\n   - Potential A/B testing frameworks\n\n6. 🚨 RISK & MITIGATION STRATEGY\n   - Potential failure modes\n   - Abuse scenarios\n   - Technical constraints\n   - Detailed mitigation plans\n   - Contingency approaches\n\n7. 🚀 GO-TO-MARKET BLUEPRINT\n   - Rollout strategy\n   - Customer adoption playbook\n   - Sales and marketing alignment\n   - Training and enablement plan\n\n8. 💻 TECHNICAL DEEP DIVE\n   - System architecture overview\n   - API and integration considerations\n   - Performance expectations\n   - Scalability projections\n   - Potential tech debt\n\n9. 💰 INVESTMENT & EFFORT ESTIMATION\n   - Development effort sizing\n   - Infrastructure costs\n   - Potential ROI models\n   - Resource allocation recommendations\n\nTONE & STYLE GUIDELINES:\n- Be brutally honest\n- No corporate jargon\n- Actionable > theoretical\n- Data-driven narratives\n- Create a sense of urgency and opportunity\n- Demonstrate deep user empathy\n- Make complex ideas simple and exciting\n\nADDITIONAL EXPECTATIONS:\n- Predict potential pivots\n- Challenge assumptions\n- Provide strategic optionality\n- Write as if you're presenting to both the CEO and the engineering team\n\nOUTPUT FORMAT:\n- Clean, professional markdown\n- Use emojis for visual hierarchy\n- Include section headers\n- Provide clear, concise language\n- Make it skimmable yet deeply informative\n\nFINAL INSTRUCTION:\nProduce a spec that doesn't just describe a product, but tells a compelling story of transformation, innovation, and user-centric design.\n`;\n\n// Simplified endpoint for competitor analysis\napp.post('/analyze-competitors', async (req, res) => {\n    const { productIdea } = req.body;\n    \n    if (!productIdea) {\n        return res.status(400).json({ error: 'Product idea is required.' });\n    }\n    \n    try {\n        const competitorAnalysis = await findCompetitors(productIdea);\n        \n        res.json({ \n            competitorAnalysis,\n            message: \"Competitor analysis completed successfully\"\n        });\n    } catch (error) {\n        console.error(\"Competitor Analysis Error:\", error);\n        res.status(500).json({ error: \"Failed to analyze competitors\", details: error.message });\n    }\n});\n\napp.post('/generate-spec', async (req, res) => {\n    const { input } = req.body;\n    \n    if (!input || input.trim().length < 10) {\n        return res.status(400).json({ error: 'Product description too short. Provide more details.' });\n    }\n\n    try {\n        console.log(\"Received input:\", input);\n        \n        // Generate main spec\n        const specCompletion = await openai.chat.completions.create({\n            model: 'gpt-4',\n            messages: [\n                { role: \"system\", content: generateSystemPrompt() },\n                { role: \"user\", content: `Product Idea: ${input}` }\n            ],\n            temperature: 0.7,\n            max_tokens: 4000\n        });\n\n        const generatedSpec = specCompletion.choices[0].message.content;\n\n        // Get competitor research directly from OpenAI\n        const competitorResearch = await findCompetitors(input);\n        \n        // Generate communication artifacts\n        const communicationArtifacts = await generateCommunicationArtifacts(input, generatedSpec);\n        \n        // Combine results\n        const completeSpec = `\n${generatedSpec}\n\n---\n\n## 🔍 COMPETITIVE LANDSCAPE ANALYSIS\n${competitorResearch}\n\n---\n\n## 📣 COMMUNICATION ARTIFACTS\n${communicationArtifacts}\n        `;\n\n        res.json({ \n            spec: completeSpec,\n            competitorResearch: competitorResearch,\n            communicationArtifacts,\n        });\n    } catch (error) {\n        console.error(\"OpenAI API Error:\", error);\n        res.status(500).json({ \n            error: 'Error generating spec', \n            details: error.message,\n            timestamp: new Date().toISOString()\n        });\n    }\n});\n\napp.post('/download-spec', (req, res) => {\n    const { spec } = req.body;\n    if (!spec) {\n        return res.status(400).json({ error: \"No spec data provided.\" });\n    }\n\n    try {\n        const docx = officegen('docx');\n        \n        // Add title\n        const titleParagraph = docx.createP();\n        titleParagraph.addText('Product Specification Document', { \n            font_face: 'Arial', \n            font_size: 16, \n            bold: true \n        });\n\n        // Add timestamp\n        const dateParagraph = docx.createP();\n        dateParagraph.addText(`Generated: ${new Date().toLocaleString()}`, { \n            font_face: 'Arial', \n            font_size: 10, \n            italic: true \n        });\n        \n        // Add separator\n        const separatorParagraph = docx.createP();\n        separatorParagraph.addText('─'.repeat(50), { font_size: 11 });\n\n        // Process the content\n        const lines = spec.split('\\n');\n        let currentParagraph = docx.createP();\n        \n        for (const line of lines) {\n            // Check if the line is a header\n            if (line.startsWith('#') || line.startsWith('- ')) {\n                currentParagraph = docx.createP();\n                \n                if (line.startsWith('##')) {\n                    currentParagraph.addText(line.replace(/^##\\s*/, ''), { \n                        font_face: 'Arial', \n                        font_size: 14, \n                        bold: true \n                    });\n                } else if (line.startsWith('#')) {\n                    currentParagraph.addText(line.replace(/^#\\s*/, ''), { \n                        font_face: 'Arial', \n                        font_size: 16, \n                        bold: true \n                    });\n                } else {\n                    currentParagraph.addText(line, { font_face: 'Arial', font_size: 11 });\n                }\n            } else if (line.trim() === '') {\n                // Empty line, create a new paragraph\n                currentParagraph = docx.createP();\n            } else {\n                // Regular text\n                currentParagraph.addText(line, { font_face: 'Arial', font_size: 11 });\n                currentParagraph = docx.createP();\n            }\n        }\n\n        res.setHeader('Content-Disposition', `attachment; filename=SpecBar_Spec_${Date.now()}.docx`);\n        res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document');\n        \n        docx.generate(res);\n    } catch (error) {\n        console.error(\"Document Generation Error:\", error);\n        res.status(500).json({ error: 'Could not generate document', details: error.message });\n    }\n});\n\n// Health check endpoint\napp.get('/health', (req, res) => {\n    res.status(200).json({ \n        status: 'healthy', \n        timestamp: new Date().toISOString(),\n        version: '1.0.0'\n    });\n});\n\napp.listen(port, () => {\n    console.log(`🚀 SpecBar server running on port ${port}`);\n    console.log(`Environment: ${process.env.NODE_ENV || 'development'}`);\n});\n\n// Graceful shutdown\nprocess.on('SIGTERM', () => {\n    console.log('SIGTERM signal received: closing HTTP server');\n    app.close(() => {\n        console.log('HTTP server closed');\n        process.exit(0);\n    });\n});",
			"settings":
			{
				"buffer_size": 13591,
				"line_ending": "Unix",
				"name": "const express = require('express');"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"paste",
					null,
					"AQAAAAAAAAAAAAAAFzUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "index1.html",
			"settings":
			{
				"buffer_size": 19719,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"paste",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAJQXAAAAAAAAAAAAAAAA8L8"
				],
				[
					12,
					1,
					"paste",
					null,
					"AgAAAAAAAAAAAAAAT08AAAAAAAAAAAAAT08AAAAAAABPTwAAAAAAABgXAAA8IURPQ1RZUEUgaHRtbD4KPGh0bWwgbGFuZz0iZW4iPgo8aGVhZD4KICAgIDxtZXRhIGNoYXJzZXQ9IlVURi04Ij4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIj4KICAgIDx0aXRsZT5TcGVjQmFyIHwgQUkgUHJvZHVjdCBTcGVjIEdlbmVyYXRvcjwvdGl0bGU+CiAgICA8bGluayBocmVmPSJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy90YWlsd2luZGNzcy8yLjIuMTkvdGFpbHdpbmQubWluLmNzcyIgcmVsPSJzdHlsZXNoZWV0Ij4KICAgIDxzdHlsZT4KICAgICAgICBAa2V5ZnJhbWVzIHNoaW1tZXIgewogICAgICAgICAgICAwJSB7IGJhY2tncm91bmQtcG9zaXRpb246IC0xMDAwcHggMDsgfQogICAgICAgICAgICAxMDAlIHsgYmFja2dyb3VuZC1wb3NpdGlvbjogMTAwMHB4IDA7IH0KICAgICAgICB9CiAgICAgICAgLnNoaW1tZXIgewogICAgICAgICAgICBhbmltYXRpb246IHNoaW1tZXIgMnMgaW5maW5pdGUgbGluZWFyOwogICAgICAgICAgICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQodG8gcmlnaHQsICNmMGYwZjAgMCUsICNlMGUwZTAgNTAlLCAjZjBmMGYwIDEwMCUpOwogICAgICAgICAgICBiYWNrZ3JvdW5kLXNpemU6IDEwMDBweCAxMDAlOwogICAgICAgIH0KICAgIDwvc3R5bGU+CjwvaGVhZD4KPGJvZHkgY2xhc3M9ImJnLWdyYXktNTAgbWluLWgtc2NyZWVuIGZsZXggZmxleC1jb2wiPgogICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIG14LWF1dG8gcHgtNCBweS0xMiBmbGV4LWdyb3ciPgogICAgICAgIDxkaXYgY2xhc3M9Im1heC13LTJ4bCBteC1hdXRvIGJnLXdoaXRlIHNoYWRvdy1sZyByb3VuZGVkLWxnIHAtOCI+CiAgICAgICAgICAgIDxoMSBjbGFzcz0idGV4dC00eGwgZm9udC1ib2xkIHRleHQtY2VudGVyIHRleHQtYmx1ZS02MDAgbWItNiI+U3BlY0JhcjwvaDE+CiAgICAgICAgICAgIDxwIGNsYXNzPSJ0ZXh0LWNlbnRlciB0ZXh0LWdyYXktNjAwIG1iLTYiPlRyYW5zZm9ybSB5b3VyIHByb2R1Y3QgaWRlYSBpbnRvIGEgc3RyYXRlZ2ljIGJsdWVwcmludDwvcD4KICAgICAgICAgICAgCiAgICAgICAgICAgIDx0ZXh0YXJlYSAKICAgICAgICAgICAgICAgIGlkPSJ1c2VySW5wdXQiIAogICAgICAgICAgICAgICAgY2xhc3M9InctZnVsbCBoLTQwIHAtNCBib3JkZXIgcm91bmRlZC1sZyBmb2N1czpyaW5nLTIgZm9jdXM6cmluZy1ibHVlLTUwMCB0cmFuc2l0aW9uIGR1cmF0aW9uLTIwMCBtYi00IgogICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9IkRlc2NyaWJlIHlvdXIgcHJvZHVjdCBpZGVhIGluIGRldGFpbC4gVGhlIG1vcmUgc3BlY2lmaWMsIHRoZSBiZXR0ZXIgdGhlIHNwZWMhIgogICAgICAgICAgICA+PC90ZXh0YXJlYT4KICAgICAgICAgICAgCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZsZXgganVzdGlmeS1jZW50ZXIgc3BhY2UteC00IG1iLTYiPgogICAgICAgICAgICAgICAgPGJ1dHRvbiAKICAgICAgICAgICAgICAgICAgICBpZD0iZ2VuZXJhdGVCdG4iCiAgICAgICAgICAgICAgICAgICAgb25jbGljaz0iZ2VuZXJhdGVTcGVjKCkiCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImJnLWJsdWUtNjAwIGhvdmVyOmJnLWJsdWUtNzAwIHRleHQtd2hpdGUgZm9udC1ib2xkIHB5LTIgcHgtNiByb3VuZGVkLWxnIHRyYW5zaXRpb24gZHVyYXRpb24tMzAwIHRyYW5zZm9ybSBob3ZlcjpzY2FsZS0xMDUiCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgR2VuZXJhdGUgU3BlYwogICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICA8YnV0dG9uIAogICAgICAgICAgICAgICAgICAgIGlkPSJkb3dubG9hZEJ1dHRvbiIKICAgICAgICAgICAgICAgICAgICBvbmNsaWNrPSJkb3dubG9hZFNwZWMoKSIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iYmctZ3JlZW4tNjAwIGhvdmVyOmJnLWdyZWVuLTcwMCB0ZXh0LXdoaXRlIGZvbnQtYm9sZCBweS0yIHB4LTYgcm91bmRlZC1sZyB0cmFuc2l0aW9uIGR1cmF0aW9uLTMwMCB0cmFuc2Zvcm0gaG92ZXI6c2NhbGUtMTA1IGhpZGRlbiIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICBEb3dubG9hZCBXb3JkCiAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICA8ZGl2IGlkPSJsb2FkaW5nQ29udGFpbmVyIiBjbGFzcz0iaGlkZGVuIHRleHQtY2VudGVyIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNoaW1tZXIgaC00IHctMy80IG14LWF1dG8gcm91bmRlZCBtYi00Ij48L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNoaW1tZXIgaC00IHctMS8yIG14LWF1dG8gcm91bmRlZCI+PC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgPGRpdiAKICAgICAgICAgICAgICAgIGlkPSJvdXRwdXQiIAogICAgICAgICAgICAgICAgY2xhc3M9Im10LTYgcC02IGJnLWdyYXktMTAwIHJvdW5kZWQtbGcgYm9yZGVyIGJvcmRlci1ncmF5LTIwMCB0ZXh0LXNtIGxlYWRpbmctcmVsYXhlZCBtYXgtaC05NiBvdmVyZmxvdy15LWF1dG8iCiAgICAgICAgICAgID48L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgoKICAgIAoKICAgIDxzY3JpcHQ+CiAgICAgICAgY29uc3QgQVBJX0JBU0VfVVJMID0gJ2h0dHA6Ly9sb2NhbGhvc3Q6MzAwMCc7CiAgICAgICAgY29uc3QgbG9hZGluZ01lc3NhZ2VzID0gWwogICAgICAgICAgICAiQnJld2luZyBwcm9kdWN0IG1hZ2ljLi4uIiwKICAgICAgICAgICAgIkRpc3RpbGxpbmcgcHJvZHVjdCB3aXNkb20uLi4iLAogICAgICAgICAgICAiRW5naW5lZXJpbmcgYnJlYWt0aHJvdWdoIGluc2lnaHRzLi4uIiwKICAgICAgICAgICAgIlRyYW5zZm9ybWluZyBpZGVhcyBpbnRvIHN0cmF0ZWd5Li4uIiwKICAgICAgICAgICAgIlVubGVhc2hpbmcgaW5uZXIgcHJvZHVjdCBnZW5pdXMuLi4iCiAgICAgICAgXTsKCiAgICAgICAgYXN5bmMgZnVuY3Rpb24gZ2VuZXJhdGVTcGVjKCkgewogICAgICAgICAgICBjb25zdCBpbnB1dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd1c2VySW5wdXQnKS52YWx1ZTsKICAgICAgICAgICAgY29uc3QgZ2VuZXJhdGVCdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZ2VuZXJhdGVCdG4nKTsKICAgICAgICAgICAgY29uc3QgbG9hZGluZ0NvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdsb2FkaW5nQ29udGFpbmVyJyk7CiAgICAgICAgICAgIGNvbnN0IG91dHB1dERpdiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdvdXRwdXQnKTsKICAgICAgICAgICAgY29uc3QgZG93bmxvYWRCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZG93bmxvYWRCdXR0b24nKTsKCiAgICAgICAgICAgIGlmIChpbnB1dC50cmltKCkubGVuZ3RoIDwgMjApIHsKICAgICAgICAgICAgICAgIGFsZXJ0KCdQbGVhc2UgcHJvdmlkZSBhIG1vcmUgZGV0YWlsZWQgcHJvZHVjdCBkZXNjcmlwdGlvbiEnKTsKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgZ2VuZXJhdGVCdG4uZGlzYWJsZWQgPSB0cnVlOwogICAgICAgICAgICBnZW5lcmF0ZUJ0bi5jbGFzc0xpc3QuYWRkKCdvcGFjaXR5LTUwJywgJ2N1cnNvci1ub3QtYWxsb3dlZCcpOwogICAgICAgICAgICBsb2FkaW5nQ29udGFpbmVyLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGRlbicpOwogICAgICAgICAgICBvdXRwdXREaXYuaW5uZXJIVE1MID0gJyc7CiAgICAgICAgICAgIGRvd25sb2FkQnV0dG9uLmNsYXNzTGlzdC5hZGQoJ2hpZGRlbicpOwoKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYCR7QVBJX0JBU0VfVVJMfS9nZW5lcmF0ZS1zcGVjYCwgewogICAgICAgICAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLAogICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IHsgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyB9LAogICAgICAgICAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHsgaW5wdXQgfSkKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTsKCiAgICAgICAgICAgICAgICBpZiAocmVzdWx0LnNwZWMpIHsKICAgICAgICAgICAgICAgICAgICBvdXRwdXREaXYuaW5uZXJIVE1MID0gYDxwcmUgY2xhc3M9IndoaXRlc3BhY2UtcHJlLXdyYXAiPiR7cmVzdWx0LnNwZWN9PC9wcmU+YDsKICAgICAgICAgICAgICAgICAgICBkb3dubG9hZEJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKCdoaWRkZW4nKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgb3V0cHV0RGl2LmlubmVySFRNTCA9ICc8cCBjbGFzcz0idGV4dC1yZWQtNTAwIj5GYWlsZWQgdG8gZ2VuZXJhdGUgc3BlYy4gUGxlYXNlIHRyeSBhZ2Fpbi48L3A+JzsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHsKICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1NwZWMgR2VuZXJhdGlvbiBFcnJvcjonLCBlcnJvcik7CiAgICAgICAgICAgICAgICBvdXRwdXREaXYuaW5uZXJIVE1MID0gYDxwIGNsYXNzPSJ0ZXh0LXJlZC01MDAiPk5ldHdvcmsgRXJyb3I6ICR7ZXJyb3IubWVzc2FnZX08L3A+YDsKICAgICAgICAgICAgfSBmaW5hbGx5IHsKICAgICAgICAgICAgICAgIGdlbmVyYXRlQnRuLmRpc2FibGVkID0gZmFsc2U7CiAgICAgICAgICAgICAgICBnZW5lcmF0ZUJ0bi5jbGFzc0xpc3QucmVtb3ZlKCdvcGFjaXR5LTUwJywgJ2N1cnNvci1ub3QtYWxsb3dlZCcpOwogICAgICAgICAgICAgICAgbG9hZGluZ0NvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdoaWRkZW4nKTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgYXN5bmMgZnVuY3Rpb24gZG93bmxvYWRTcGVjKCkgewogICAgICAgICAgICBjb25zdCBzcGVjID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ291dHB1dCcpLmlubmVyVGV4dDsKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYCR7QVBJX0JBU0VfVVJMfS9kb3dubG9hZC1zcGVjYCwgewogICAgICAgICAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLAogICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IHsgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyB9LAogICAgICAgICAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHsgc3BlYyB9KQogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgY29uc3QgYmxvYiA9IGF3YWl0IHJlc3BvbnNlLmJsb2IoKTsKICAgICAgICAgICAgICAgIGNvbnN0IGxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7CiAgICAgICAgICAgICAgICBsaW5rLmhyZWYgPSB3aW5kb3cuVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTsKICAgICAgICAgICAgICAgIGxpbmsuZG93bmxvYWQgPSBgU3BlY0Jhcl9Qcm9kdWN0U3BlY18ke25ldyBEYXRlKCkudG9JU09TdHJpbmcoKS5zcGxpdCgnVCcpWzBdfS5kb2N4YDsKICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQobGluayk7CiAgICAgICAgICAgICAgICBsaW5rLmNsaWNrKCk7CiAgICAgICAgICAgICAgICBsaW5rLnJlbW92ZSgpOwogICAgICAgICAgICB9IGNhdGNoIChlcnJvcikgewogICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignRG93bmxvYWQgRXJyb3I6JywgZXJyb3IpOwogICAgICAgICAgICAgICAgYWxlcnQoJ0ZhaWxlZCB0byBkb3dubG9hZCBzcGVjLiBQbGVhc2UgdHJ5IGFnYWluLicpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgPC9zY3JpcHQ+CjwvYm9keT4KPC9odG1sPg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAABgXAAAAAAAAAAAAAAAA8L8"
				],
				[
					3,
					1,
					"paste",
					null,
					"",
					"AQAAAAAAAAABAAAAAAAAAAAAAABPTwAAAAAAAAAAAAAAAPC/"
				]
			]
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/Users/Sam/llm/multiple-llm.html",
		"/Users/Sam/llm/single-llm.html",
		"/Users/Sam/SpecBar/index.html",
		"/Users/Sam/Desktop/auto_storyline_flow.json",
		"/Users/Sam/SpecBar/server.js",
		"/Users/Sam/Desktop/linkedin-to-storyline/app/page.tsx",
		"/Users/Sam/Desktop/SPO.html",
		"/Users/Sam/Desktop/private.html",
		"/Users/Sam/Desktop/hello1.html",
		"/Users/Sam/Desktop/hello2.html",
		"/Users/Sam/Desktop/hello.html",
		"/Users/Sam/Desktop/event.html"
	],
	"find":
	{
		"height": 24.0
	},
	"find_in_files":
	{
		"height": 98.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"competitor",
			"token",
			".env",
			"findcom",
			"competitor",
			"validateCompetitorInfo",
			"max",
			"gpt",
			".env"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/Users/Sam/SpecBar/server.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13591,
						"regions":
						{
						},
						"selection":
						[
							[
								13591,
								13591
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5484.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 1,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13591,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								13591
							]
						],
						"settings":
						{
							"auto_name": "const express = require('express');",
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5596.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "index1.html",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 19719,
						"regions":
						{
						},
						"selection":
						[
							[
								19719,
								19719
							]
						],
						"settings":
						{
							"syntax": "Packages/HTML/HTML.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 6894.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 24.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "SpecBar.sublime-project",
	"replace":
	{
		"height": 44.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 150.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
